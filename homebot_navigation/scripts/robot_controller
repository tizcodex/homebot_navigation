#!/usr/bin/env python

import rospy

from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal
import actionlib
from actionlib_msgs.msg import *
from geometry_msgs.msg import Pose, Point, Quaternion

class Robot_Control():
    def __init__(self):
        # Check if goal is sent
        self.goal_sent = False
        
        rospy.on_shutdown(self.shutdown)
        
        self.move_base = actionlib.SimpleActionClient("move_base", MoveBaseAction)
        rospy.loginfo("Wait for the action server...")
        
        # Wait for up-to 5 seconds for the action server to come up
        self.move_base.wait_for_server(rospy.Duration(5))
        
    def goto(self, pos, quat):
        # Send a goal
        self.goal_sent = True
        goal = MoveBaseGoal()
        goal.target_pose.header.frame_id = 'map'
        goal.target_pose.header.stamp = rospy.Time.now()
        goal.target_pose.pose = Pose(Point(pos['x'], pos['y'], 0.000),
                                     Quaternion(quat['r1'],quat['r2'],quat['r3'],quat['r4']))
        # Start moving
        self.move_base.send_goal(goal)
        
        # Allow Turtlebot 60 sec to complete task
        success = self.move_base.wait_for_result(rospy.Duration(60))
        
        state = self.move_base.get_state()
        result = False
        
        if success and state == GoalStatus.SUCCEEDED:
            # Did it!
            result = True
        else:
            self.move_base.cancel_goal()
        
        self.goal_sent = False
        return result
        
        
    def shutdown(self):
        if self.goal_sent:
            self.move_base.cancel_goal()
            rospy.loginfo("Stop")
            rospy.sleep(1)
            
if __name__ == "__main__":
    try:
        rospy.init_node('nav_test',anonymous=False)
        navi = Robot_Control()
        goal_1 = {'x':0.037, 'y':-2.4}
        goal_2 = {'x':4.35, 'y':-1.93}
        goal_3 = {'x':-0.546, 'y':0.196}
        goal_list = [goal_1,goal_2,goal_3]
        quaternion = {'r1':0.000, 'r2':0.000,'r3':0.000,'r4':1.000}
        
        # Do one goal at a time (using for loop)
        for goal in goal_list:
            rospy.loginfo("Go to (%s, %s) pose", goal['x'],goal['y'])
            success = navi.goto(goal, quaternion)
            if success:
                rospy.loginfo("Reached my goal!")
            else:
                rospy.loginfo("Failed to reach my goal!")
            rospy.sleep(1)
    except rospy.ROSInterruptException:
        rospy.loginfo("Ctrl-C caught. Quitting!")
                    
        
