<launch>
  
  <param name="/use_sim_time" value="true"/>
  
  <!-- Map server -->
  <node name="map_server" pkg="map_server" type="map_server" args="$(find simulation)/config/maps/$(arg map_file)" respawn="false" />
  
  <!-- Stage -->
  <node pkg="stage_ros" type="stageros" name="stageros" args="$(find simulation)/config/stage/$(arg world_file)" required="true" respawn="false" >
    <param name="base_watchdog_timeout" value="0.2"/>
  </node>
  
<!-- BEGIN HOMEROBOT -->
  <group ns="leo_bot">
    <param name="tf_prefix" value="leo_bot" />

    <node pkg="move_base" type="move_base" name="move_base_node" output="screen" respawn="false" required="true">
      <remap from="map" to="/map" />

      <param name="controller_frequency" value="5.0" />
      <!--
      
      <param name="shutdown_costmaps" value="false" />

      <param name="base_local_planner" value="dwa_local_planner/DWAPlannerROS" />

      ###<!
      <param name="hrteam_map_filename" value="$(find hrteam_planner)/map-11jan12.conf" />
      <param name="base_global_planner" value="hrteam_planner/HRTeamPlanner" />
         >

      <param name="base_global_planner" value="global_planner/GlobalPlanner" />

      ###<!<rosparam param="clearing_rotation_allowed">false</rosparam>>

      ###<! The rate (in Hz) at which to run the global planning loop. >
      <param name="planner_frequency" value="1.0" />

      ###<! How long the planner will wait (in seconds) in an attempt to find a valid plan
           before space-clearing operations are performed. >
      <param name="planner_patience" value="2.0"/>

      ###<! How long the controller will wait (in seconds) without receiving a valid control
           before space-clearing operations are performed. >
      <param name="controller_patience" value="2.0"/>

      ###<! The distance away from the robot (in meters) at which obstacles will be cleared
           from the costmap when attampting to clear space in the map. >
      <param name="conservative_reset_dist" value="9.0"/>
      
      <rosparam param="recovery_behaviors">
        [
        {name: conservative_clear, type: clear_costmap_recovery/ClearCostmapRecovery},
        ###<!{name: rotate_recovery, type: rotate_recovery/RotateRecovery},>
        {name: backup_recovery, type: backup_recovery/BackupRecovery},
        {name: aggressive_clear, type: clear_costmap_recovery/ClearCostmapRecovery}
        ]
      </rosparam>
      -->
      <rosparam file="$(find homebot_navigation)/param/turtlebot_generic/costmap_common_params.yaml" command="load" />

      <rosparam file="$(find homebot_navigation)/param/turtlebot_generic/costmap_common_params.yaml" command="load" ns="global_costmap" />
      <rosparam file="$(find homebot_navigation)/param/turtlebot_generic/costmap_common_params.yaml" command="load" ns="local_costmap" />
      <rosparam file="$(find homebot_navigation)/param/turtlebot_generic/local_costmap_params.yaml" command="load" />
      <rosparam file="$(find homebot_navigation)/param/turtlebot_generic/global_costmap_params.yaml" command="load" />
      <rosparam file="$(find homebot_navigation)/param/turtlebot_generic/dwa_local_planner_params.yaml" command="load" />
      <rosparam file="$(find homebot_navigation)/param/turtlebot_generic/global_planner_params.yaml" command="load" ns="GlobalPlanner" />

    </node>

    <node pkg="fake_localization" type="fake_localization" name="fake_localization" respawn="false" output="screen">
      <param name="odom_frame_id" value="leo_bot/odom" />
      <param name="base_frame_id" value="leo_bot/base_link" />
      <param name="publish_frequency" value="5.0" />
    </node>

  </group>
<!-- END ROBOT 1 -->
  
</launch>
